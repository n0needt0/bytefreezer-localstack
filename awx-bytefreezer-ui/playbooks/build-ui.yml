---
- name: Build and Push ByteFreezer UI Container
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    container_registry: "{{ container_registry | default('docker.io/bytefreezer') }}"
    ui_version: "{{ ui_version | default('latest') }}"
    ui_source_path: "{{ ui_source_path | default('/tmp/bytefreezer-ui') }}"
    build_context: "{{ build_context | default('/tmp/bytefreezer-ui-build') }}"

  tasks:
    - name: Ensure build directory exists
      file:
        path: "{{ build_context }}"
        state: directory
        mode: '0755'

    - name: Clone ByteFreezer UI source code
      git:
        repo: "{{ ui_git_repo }}"
        dest: "{{ ui_source_path }}"
        version: "{{ ui_git_branch | default('main') }}"
        force: yes
      when: ui_git_repo is defined

    - name: Copy UI source to build context
      synchronize:
        src: "{{ ui_source_path }}/"
        dest: "{{ build_context }}/"
        delete: yes
      when: ui_source_path != build_context

    - name: Create production environment file
      template:
        src: ../templates/.env.production.j2
        dest: "{{ build_context }}/.env.production"
        mode: '0644'

    - name: Create Dockerfile
      template:
        src: ../templates/Dockerfile.j2
        dest: "{{ build_context }}/Dockerfile"
        mode: '0644'

    - name: Build Docker image
      docker_image:
        build:
          path: "{{ build_context }}"
          dockerfile: Dockerfile
          pull: yes
          args:
            BUILDKIT_INLINE_CACHE: "1"
        name: "{{ container_registry }}/bytefreezer-ui"
        tag: "{{ ui_version }}"
        push: yes
        force_tag: yes
        source: build
      register: build_result

    - name: Display build results
      debug:
        msg:
          - "Build completed successfully!"
          - "Image: {{ container_registry }}/bytefreezer-ui:{{ ui_version }}"
          - "Image ID: {{ build_result.image.Id }}"
          - "Size: {{ (build_result.image.Size / 1024 / 1024) | round(1) }} MB"

    - name: Tag as latest if version is not latest
      docker_image:
        name: "{{ container_registry }}/bytefreezer-ui"
        repository: "{{ container_registry }}/bytefreezer-ui"
        tag: latest
        push: yes
        source: local
      when: ui_version != 'latest'

    - name: Clean up build artifacts
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ build_context }}"
        - "{{ ui_source_path }}"
      when: cleanup_build_artifacts | default(true)